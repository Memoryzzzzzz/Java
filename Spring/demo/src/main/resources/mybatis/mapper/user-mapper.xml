<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 命名空间，不同的sql进行隔离 -->
<!-- 注意：使用mapper代理方法开发，namespace有特殊重要作用，namespace等于mapper的接口地址 -->
<mapper namespace="com.test.mybatis.mapper.UserMapper">
  <!-- 在映射文件中配置sql语句 -->
  <!-- id：唯一标志一个sql，一个statement -->
  <!-- parameterType：指定参数的类型，这里指定java.lang.Integer类型 -->
  <!-- #{ }：表示一个占位符 -->
  <!-- #{id}：其中的id表示接入参数的，参数名称就是id，如果输入参数是简单类型，#{ }中的参数名可以任意，可以value或者其他名称 -->
  <!-- resultType：指定sql输出结果的映射java对象类型，select指定resultType表示将单条记录映射的java对象 -->
  <select id="findUserById" parameterType="int" resultType="user">
    select * from tb_student where id=#{id}
  </select>
<!--  <select id="findUserById" parameterType="java.lang.Integer" resultType="com.test.mybatis.domain.User">-->
<!--    select * from tb_student where id=#{id}-->
<!--  </select>-->

  <!-- 根据用户名称模糊搜索用户信息，可能返回多条 -->
  <!-- resultType:指定单条记录所记录的java映射对象 -->
  <!-- ${}:表示拼接sql字符串，将接收的参数的内容不加修饰拼接在sql中，使用${}拼接sql，可能引起SQL注入，为了规避可以使用函数拼接 -->
  <!-- ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
  <select id="findUserByName" parameterType="java.lang.String"  resultType="com.test.mybatis.domain.User">
    select * from tb_student where name LIKE concat('%',#{value},'%')
  </select>
</mapper>