<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 命名空间，不同的sql进行隔离 -->
<mapper namespace="user">
  <!-- 在映射文件中配置sql语句 -->
  <!-- id:唯一标志一个sql，一个statement -->
  <!-- parameterType:指定参数的类型，这里指定int类型 -->
  <!-- #{}:表示一个占位符 -->
  <!-- #{id}:其中的id表示接入参数的，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或者其他名称 -->
  <!-- resultType:指定sql输出结果的映射java对象类型，select指定resultType表示将单条记录映射的java对象 -->
  <select id="findUserById" parameterType="java.lang.Integer" resultType="com.test.mybatis.domain.User">
    select * from tb_student where id=#{id}
  </select>

  <!-- 根据用户名称模糊搜索用户信息，可能返回多条 -->
  <!-- resultType:指定单条记录所记录的java映射对象 -->
  <!-- ${}:表示拼接sql字符串，将接收的参数的内容不加修饰拼接在sql中，使用${}拼接sql，可能引起SQL注入 -->
  <!-- ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
  <select id="findUserByName" parameterType="java.lang.Integer" resultType="com.test.mybatis.domain.User">
    select * from tb_student where name LIKE '%${value}%'
  </select>

  <!-- 添加用户 -->
  <!-- parameterType:指定传入参数的java对象pojo -->
  <!-- ${}中指定javapojo的属性名，接收pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
  <insert id="insertUser" parameterType="com.test.mybatis.domain.User" useGeneratedKeys="true">
    <!-- 将插入数据的主键进行返回 -->
    <!-- select last_insert_id:得到insert进去记录的主键值，只适用自增主键 -->
    <!-- keyProperty:将查询的主键值设置到parameterType对象的某个属性 -->
    <!-- order:select last_insert_id()执行顺序，相对于insert语句来说它的执行顺序 -->
    <!-- resultType:指定select last_insert_id()的执行顺序 -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      select last_insert_id()
    </selectKey>
    <!-- 执行顺序：首先通过uuid()得到主键，将主键设置到user对象的id属性中，其次再insert执行时，从user对象取出id属性值，注意：插入语句必须包含id -->
    <!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
      select uuid()
    </selectKey> -->
    insert into tb_student (name,sex) value (#{name},#{sex})
  </insert>

  <!-- 根据id删除用户，需要id值 -->
  <delete id="deleteUserById" parameterType="java.lang.Integer">
    delete from tb_student where id=#{id}
  </delete>

  <!-- 更新用户 -->
  <!-- 需要传入用户的id，需要传入用户的更新信息 -->
  <!-- parameterType:需要更新的对象，主键id必须存在 -->
  <update id="updateUser" parameterType="com.test.mybatis.domain.User">
    update tb_student set name=#{name},sex=#{sex} where id=#{id}
  </update>
</mapper>